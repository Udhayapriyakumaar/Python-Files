Dictionary

storing multiple variables under one variable

dictionary format : variable={Key:Value}

example:

programming_dictionary = {
 "Bug": "An error in a program that prevents the program from running as expected.",
 
 "Function": "A piece of code that you can easily call over and over again."
}

print(programming_dictionary["Bug"])  

Ans:

An error in a program that prevents the program from running as expected.
------------------------------------------------------------------------------

ADDING ELEMENT IN DICTIONARY:

programming_dictionary = {
 "Bug": "An error in a program that prevents the program from running as expected.",
 
 "Function": "A piece of code that you can easily call over and over again."
}

programming_dictionary["Loop"]="The action of doing something doing  over and over again."

print(programming_dictionary)

Ans:
{
 'Bug': 'An error in a program that prevents the program from running as expected.',
 
 'Function': 'A piece of code that you can easily call over and over again.',
  
 'Loop': 'The action of doing something doing  over and over again.'
}
--------------------------------------------------------------------------------------------
CREATING EMPTY DICTIONARY

empty_dictionary={}

-----------------------------------------------------------------------------------------

WIPING DICTIONARY

programming_dictionary={}
print(programming_dictionary)

Ans:
{}
-----------------------------------------------------------------
EDITING DICTIONARY

programming_dictionary["Bug"]="A moth in computer"
print(programming_dictionary)

Ans:
{
 'Bug': 'A moth in computer',
 
 'Function': 'A piece of code that you can easily call over and over again.',
  
 'Loop': 'The action of doing something doing  over and over again.'
}
------------------------------------------------------------------------
LOOPING THROUGH DICTIONARY

for key in programming_dictionary:
	print(key)
	print(programming_dictionary[key])
Ans:
Bug
A moth in computer
Function
A piece of code that you can easily call over and over again.
Loop
The action of doing something doing  over and over again.
----------------------------------------------------

INTERACTIVE CHALLENGE

student_scores = {
  "Harry": 81,
  "Ron": 78,
  "Hermione": 99, 
  "Draco": 74,
  "Neville": 62,
}
# ðŸš¨ Don't change the code above ðŸ‘†

#TODO-1: Create an empty dictionary called student_grades.
student_grades={}


#TODO-2: Write your code below to add the grades to student_grades.ðŸ‘‡
for student in student_scores:
    score=student_scores[student]
    if score>=91 and score<=100:
        student_grades[student]="Outstanding"
    elif score>=81 and score<=90:
        student_grades[student]="Exceeds Expectations"
    elif score>=71 and score<=80: 
        student_grades[student]="Acceptable"
    elif score<=70:
        student_grades[student]="Fail" 
    else:
        break      

# ðŸš¨ Don't change the code below ðŸ‘‡
print(student_grades)

Ans:
'{'Harry': 'Exceeds Expectations', 'Ron': 'Acceptable', 'Hermione': 'Outstanding', 'Draco': 'Acceptable', 'Neville': 'Fail'}'
-------------------------------------------------------------------------------------------------------------------------------

NESTING

capitals={
	"France": "Paris",
	"Germany": "Berlin"}
-------------------------------------
NESTING LIST IN DICTIONARY


travel_log={
	"France": ["Paris","Lille","Dijon"],
	"Germany":["Berlin","Hamburg","Stuttgart"]}	
----------------------------------------------------
NESTING DICTIONARY IN DICTIONARY

travel_log={
	"France": {"cities_visited":["Paris","Lille","Dijon"],"total_visited":12}
	"Germany":{"cities_visited":["Berlin","Hamburg","Stuttgart"],"total_visited":5}}
Ans:
{
	"France": {"cities_visited":["Paris","Lille","Dijon"],"total_visited":12}
	"Germany":{"cities_visited":["Berlin","Hamburg","Stuttgart"],"total_visited":5}}
-------------------------------------------------------------------------------------------
NESTING DICTIONARIES IN LISTS

travel_log=[{
	"country":"France"
	"cities_visited":["Paris","Lille","Dijon"]
	"total_visited":12  
		}{
	"country":"France"
	"cities_visited":["Berlin","Hamburg","Stuttgart"]
	"total_visited":5}
]
------------------------------------------------------------------------
INTERACTIVE CHALLENGE

travel_log = [
{
  "country": "France",
  "visits": 12,
  "cities": ["Paris", "Lille", "Dijon"]
},
{
  "country": "Germany",
  "visits": 5,
  "cities": ["Berlin", "Hamburg", "Stuttgart"]
},
]
#ðŸš¨ Do NOT change the code above

#TODO: Write the function that will allow new countries
#to be added to the travel_log. ðŸ‘‡
def add_new_country(country,visited,visited_list):
    new_country={}
    new_country["country"]=country
    new_country["visited"]=visited
    new_country["visited_list"]=visited_list
    travel_log.append(new_country)




#ðŸš¨ Do not change the code below
add_new_country("Russia", 2, ["Moscow", "Saint Petersburg"])
print(travel_log)

Ans:
[{'country': 'France', 'visits': 12, 'cities': ['Paris', 'Lille', 'Dijon']}, {'country': 'Germany', 'visits': 5, 'cities': ['Berlin', 'Hamburg', 'Stuttgart']}, {'country': 'Russia', 'visited': 2, 'visited_list': ['Moscow', 'Saint Petersburg']}]

----------------------------------------------------------------
QUIZ
----------------------------------
SECRET AUCTION PROGRAM

art.py

logo = '''
                         ___________
                         \         /
                          )_______(
                          |"""""""|_.-._,.---------.,_.-._
                          |       | | |               | | ''-.
                          |       |_| |_             _| |_..-'
                          |_______| '-' `'---------'` '-'
                          )"""""""(
                         /_________\\
                       .-------------.
                      /_______________\\
'''
-------------------------------------------------------------------------
from replit import clear
#HINT: You can call clear() to clear the output in the console.
from art import logo
print(logo)
bids={}
bid_finish=False

def find_high_bidder(high_record):
  high_bid=0
  winner=""
  for bidder in high_record:
    bid_amt=high_record[bidder]
    if bid_amt>high_bid:
      high_bid=bid_amt
      winner=bidder
    print(f"The winner is {winner} with a bid of {bid_amt}.")  
while not bid_finish:
  name = input("What is your name?: ")
  price = int(input("What is your bid?: $"))
  bids[name] = price
  should_continue= input("Are there any other bidders? Type 'yes or 'no'.\n")
  if should_continue == "no":
    bidding_finished = True
    find_high_bidder(bids)
  elif should_continue == "yes":
    clear()

Ans:


                         ___________
                         \         /
                          )_______(
                          |"""""""|_.-._,.---------.,_.-._
                          |       | | |               | | ''-.
                          |       |_| |_             _| |_..-'
                          |_______| '-' `'---------'` '-'
                          )"""""""(
                         /_________\\
                       .-------------.
                      /_______________\\

What is your name?: Udhaya
What is your bid?: $70
Are there any other bidders? Type 'yes or 'no'.
no
The winner is Udhaya with a bid of 70.

