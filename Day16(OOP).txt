OOP Concept

Example Restaurant:

here a single person cannot run the restaurant
they can but limitation for the person will be less


so that  we assign each task to each person to successfully run the restaurent

waiter ,chef, cleaner --->will be managed by---->manager
waiter has the attribute has is_holding_plates=True and  tables_responsibile=[4,5,6]
methods or functions as def take_order(table,order):
#takes order to chef
def take_payment(amount):
#add money to restaurant


here waiters is object there can be more objects like waiter hery and waiter betty

here the word waiter is class which gives blueprint and template.

representing 

object.attribute


Here example for object methos for car

the attributes are speed=0 and fuel=32
the methods are 
def move():
	speed=60
def stop():
	speed=0
-------------------------------------------------------------
Creating an object from class

Syntax:
object=class()
-------------------------------------------------------
import another_module
print(another_module.another_variable)

from turtle import Turtle,Screen

nimbu=Turtle()
print(nimbu)
nimbu.shape("turtle")
nimbu.color("red","green")
nimbu.forward(100)

my_screen=Screen()
print(my_screen.canvheight)
my_screen.exitonclick()

OUTPUT:
Screen opens and the turtle moves 100 steps with red and green colour

----------------------------
modules of code where each file we create in project is essentially model

But package is different from module where hole bunch of code was written by other

PyPI is Python package Index  

Creating  a table using prettyTable package

from prettytable import PrettyTable
table=PrettyTable()
table.add_column("Pokemon Name",["Pikachu","Squirtle","Charmander"])
table.add_column("Type",["Electric","Water","Fire"])
table.align="c"
print(table)

OUTPUT:

+--------------+----------+
| Pokemon Name |   Type   |
+--------------+----------+
|   Pikachu    | Electric |
|   Squirtle   |  Water   |
|  Charmander  |   Fire   |
+--------------+----------+

-------------------------------------------------------------------------------------
Object Attributes

table.align="c"
#c means center

---------------------------------
QUIZ
1.
In OOP what is the name of the blueprint for creating objects?
Ans:
class
----------------------------------------------
2.Given a Class blueprint for a Car has the following attributes and methods, which line of code in the answers will produce an error?

Attributes:

num_of_seats

speed

Methods:

drive()

brake()

Ans:
car.brake()=0
---------------------------------------------------------
3.my_toyota = Car()
my_fiat = Car()
What word would you use to describe what's inside my_toyota and my_fiat?

Ans:
Object
---------------------------------------------------------------
Hotel.dry_clean() 
-----------------------------------------------
COFFEE MACHINE PROJECT USING OOPS CONCEPT

coffee_maker.py

class CoffeeMaker:
    """Models the machine that makes the coffee"""
    def __init__(self):
        self.resources = {
            "water": 300,
            "milk": 200,
            "coffee": 100,
        }

    def report(self):
        """Prints a report of all resources."""
        print(f"Water: {self.resources['water']}ml")
        print(f"Milk: {self.resources['milk']}ml")
        print(f"Coffee: {self.resources['coffee']}g")

    def is_resource_sufficient(self, drink):
        """Returns True when order can be made, False if ingredients are insufficient."""
        can_make = True
        for item in drink.ingredients:
            if drink.ingredients[item] > self.resources[item]:
                print(f"Sorry there is not enough {item}.")
                can_make = False
        return can_make

    def make_coffee(self, order):
        """Deducts the required ingredients from the resources."""
        for item in order.ingredients:
            self.resources[item] -= order.ingredients[item]
        print(f"Here is your {order.name} ☕️. Enjoy!")

------------------------------------------------------------------
menu.py

class MenuItem:
    """Models each Menu Item."""
    def __init__(self, name, water, milk, coffee, cost):
        self.name = name
        self.cost = cost
        self.ingredients = {
            "water": water,
            "milk": milk,
            "coffee": coffee
        }


class Menu:
    """Models the Menu with drinks."""
    def __init__(self):
        self.menu = [
            MenuItem(name="latte", water=200, milk=150, coffee=24, cost=2.5),
            MenuItem(name="espresso", water=50, milk=0, coffee=18, cost=1.5),
            MenuItem(name="cappuccino", water=250, milk=50, coffee=24, cost=3),
        ]

    def get_items(self):
        """Returns all the names of the available menu items"""
        options = ""
        for item in self.menu:
            options += f"{item.name}/"
        return options

    def find_drink(self, order_name):
        """Searches the menu for a particular drink by name. Returns that item if it exists, otherwise returns None"""
        for item in self.menu:
            if item.name == order_name:
                return item
        print("Sorry that item is not available.")
----------------------------------------------------------------------
money_machine.py

class MoneyMachine:

    CURRENCY = "$"

    COIN_VALUES = {
        "quarters": 0.25,
        "dimes": 0.10,
        "nickles": 0.05,
        "pennies": 0.01
    }

    def __init__(self):
        self.profit = 0
        self.money_received = 0

    def report(self):
        """Prints the current profit"""
        print(f"Money: {self.CURRENCY}{self.profit}")

    def process_coins(self):
        """Returns the total calculated from coins inserted."""
        print("Please insert coins.")
        for coin in self.COIN_VALUES:
            self.money_received += int(input(f"How many {coin}?: ")) * self.COIN_VALUES[coin]
        return self.money_received

    def make_payment(self, cost):
        """Returns True when payment is accepted, or False if insufficient."""
        self.process_coins()
        if self.money_received >= cost:
            change = round(self.money_received - cost, 2)
            print(f"Here is {self.CURRENCY}{change} in change.")
            self.profit += cost
            self.money_received = 0
            return True
        else:
            print("Sorry that's not enough money. Money refunded.")
            self.money_received = 0
            return False
        
-----------------------------------------------------------------------
main.py

from menu import Menu, MenuItem
from coffee_maker import CoffeeMaker
from money_machine import MoneyMachine
money_machine=MoneyMachine()
coffee_maker=CoffeeMaker()
menu=Menu()
menu.get_items()
is_on=True



while is_on:
    options=menu.get_items()
    choice=input(f"What would you like? ({options}):")
    if choice=="off":
        is_on=False
    elif choice=="report":
        coffee_maker.report()
        money_machine.report()
    else:
        drink=menu.find_drink(choice)
        if coffee_maker.is_resource_sufficient(drink) and money_machine.make_payment(drink.cost):
            coffee_maker.make_coffee(drink)


OUTPUT:

C:\Users\Admin\miniconda3\python.exe C:\Users\Admin\Downloads\oop-coffee-machine-start\main.py 
What would you like? (latte/espresso/cappuccino/):latte
Please insert coins.
How many quarters?: 12
How many dimes?: 12
How many nickles?: 12
How many pennies?: 12
Here is $2.42 in change.
Here is your latte ☕️. Enjoy!
What would you like? (latte/espresso/cappuccino/):latte
Sorry there is not enough water.
Sorry there is not enough milk.
What would you like? (latte/espresso/cappuccino/):
