classes can be inherited by other classes.

Here remaining 4 modules are going to be created

4.Detect collision with food
5.Create a scoreboard
6.Detect collision with wall
7.Detect collision with tall

Inheritance:

Syntax:

class Fish(Animal):
	def __init__(self):
		super().__init__()


code:

class Animal:
    def __init__(self):
        self.num_eyes = 2

    def breathe(self):
        print("Inhale, exhale.")

class Fish(Animal):
    def __init__(self):
        super().__init__()

    def breathe(self):
        super().breathe()
        print("doing this underwater.")

    def swim(self):
        print("moving in water.")

nemo = Fish()
nemo.breathe()

Ans:
Inhale, exhale.
doing this underwater.
---------------------------------------
QUIZ
------------------------------------
Inheritance used in Snake Game

main.py

from turtle import Screen
from snake import Snake
from food import Food
from score_board import Scoreboard
import time

screen = Screen()

screen.setup(width=600, height=600)
screen.bgcolor("black")
screen.title("My Snake Game")
screen.tracer(0)

snake = Snake()
food = Food()
score_board = Scoreboard()

screen.listen()
screen.onkey(snake.up, "Up")
screen.onkey(snake.down, "Down")
screen.onkey(snake.left, "Left")
screen.onkey(snake.right, "Right")
game_is_on = True
while game_is_on:
    screen.update()
    time.sleep(0.1)
    snake.move()

    if snake.head.distance(food) < 15:
        food.refresh()
        snake.extend()
        score_board.increase_score()

    if snake.head.xcor()>280 or snake.head.xcor()< -200 or snake.head.ycor()>280 or snake.head.ycor()< -280:
        game_is_on=False
        score_board.game_over()

    for segment in snake.segments:
        if snake.head.distance(segment)<10:
            game_is_on=False
            score_board.game_over()
screen.exitonclick()

-----------------------------------------------------
score_board.py

from turtle import Turtle

class Scoreboard(Turtle):
    def __init__(self):
        super().__init__()
        self.score=0
        self.penup()
        self.color("white")
        self.hideturtle()
        self.goto(0,270)
        self.update_score_board()


    def update_score_board(self):
        self.write(f"Score is: {self.score}", align="center", font=("Arial", 20, "normal"))

    def game_over(self):
        self.penup()
        self.color("white")
        self.goto(0, 0)
        self.write("Game Over", align="center", font=("Arial", 20, "normal"))
    def increase_score(self):
        self.score += 1
        self.clear()
        self.update_score_board()
----------------------------------------------------------
snake.py

from turtle import Turtle
STARTING_POSITIONS = [(0, 0), (-20, 0), (-40, 0)]
move_distance = 20
UP = 90
DOWN = 270
LEFT = 180
RIGHT = 0


class Snake:
    def __init__(self):
        self.segments = []
        self.create_snake()
        self.head = self.segments[0]

    def create_snake(self):
        for position in STARTING_POSITIONS:
            self.add_segment(position)

    def add_segment(self,position):

            new_segment = Turtle("square")
            new_segment.color("white")
            new_segment.penup()
            new_segment.goto(position)
            self.segments.append(new_segment)

    def move(self):
        for seg_num in range(len(self.segments) - 1, 0, -1):
            new_x = self.segments[seg_num - 1].xcor()
            new_y = self.segments[seg_num - 1].ycor()
            self.segments[seg_num].goto(new_x, new_y)
        self.head.forward(move_distance)

    def up(self):
        if self.head.heading() != DOWN:
            self.head.setheading(UP)

    def down(self):
        if self.head.heading() != UP:
            self.head.setheading(DOWN)

    def left(self):
        if self.head.heading() != RIGHT:
            self.head.setheading(LEFT)

    def right(self):
        if self.head.heading() != LEFT:
            self.head.setheading(RIGHT)


    def extend(self):
        self.add_segment(self.segments[-1].position())

------------------------------------------------------------

food.py

from turtle import Turtle
import random


class Food(Turtle):
    def __init__(self):
        super().__init__()
        self.shape("circle")
        self.penup()
        self.shapesize(stretch_len=0.5, stretch_wid=0.5)
        self.color("yellow")
        self.speed("fastest")


    def refresh(self):
        random_x = random.randint(-200, 200)
        random_y = random.randint(-200, 200)
        self.goto(random_x, random_y)
------------------------------------------------------

OUTPUT:

Snake Game
